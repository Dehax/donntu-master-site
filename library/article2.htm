<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <title>Подсистема защиты авторского права в программном обеспечении — А.В. Чернышова, Д.В. Кубашевский</title>
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">
  <link rel="stylesheet" type="text/css" href="../css/style.css">
</head>

<body>
  <div class="NavbarTopOffset"></div>

  <div class="container">
    <nav class="navbar navbar-expand-xl navbar-dark bg-primary fixed-top" id="menu">
      <a class="navbar-brand" href="/" target="_blank" title="Перейти на портал магистров ДонНТУ">Портал магистров</a>
      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Переключить меню">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav mx-auto">
          <li class="nav-item">
            <a class="nav-link" href="../index.htm">Резюме</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="../bio/index.htm">Биография</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="../diss/index.htm">Реферат</a>
          </li>
          <li class="nav-item">
            <a class="nav-link active" href="../library/index.htm">Библиотека</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="../links/index.htm">Ссылки</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="../links/zvit.htm">Отчёт о поиске</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="../ind/index.htm">Индивидуальный раздел</a>
          </li>
        </ul>
        <ul class="navbar-nav">
          <li class="nav-item">
            <a class="nav-link" href="http://donntu.org" target="_blank" title="Перейти на сайт ДонНТУ">ДонНТУ</a>
          </li>
        </ul>
      </div>
    </nav>

    <main class="card shadow my-4" id="middleblock">
      <div class="card-body">
        <div id="maintext">
          <h1 class="text-center">Подсистема защиты авторского права в программном обеспечении</h1>

          <p>
            <strong>Авторы:</strong> А.В. Чернышова, Д.В. Кубашевский<br>
            <strong>Источник:</strong> VI Международная научно-техническая конференция "Информатика, управляющие системы, математическое и компьютерное моделирование – 2016" / Информатика и кибернетика. – 2016. – № 2(4). – С. 68-72.
          </p>

          <h2>Аннотация</h2>

          <p>
            В данной работе выполнен анализ существующих механизмов защиты авторского права на программное обеспечение и
            предложено описание работы программной подсистемы защиты ПО с использованием криптографических алгоритмов
            шифрования.
          </p>

          <h2>Введение</h2>

          <p>
            Ежедневно продаётся огромное количество копий программного обеспечения. Каждая такая копия обычно включает в
            себя систему защиты от копирования и проверки лицензии на приобретённое ПО. Однако зачастую подобные системы
            защиты ненадёжны, так как их разработке уделяется значительно меньше времени и внимания, чем оригинальному
            продукту — объекту защиты. Поэтому программное обеспечение, которое имеет такую слабую защиту, обычно
            подвергается "взлому" "крэкерами". Далее взломанные копии попадают в открытый доступ, где обычные
            пользователи бесплатно скачивают полностью работоспособное ПО. Таким образом, разработчики ПО несут огромные
            финансовые потери.
          </p>

          <p>
            Лицензия на программное обеспечение — это правовой инструмент, определяющий использование и распространение
            программного обеспечения, защищённого авторским правом. Обычно лицензия на программное обеспечение разрешает
            получателю использовать одну или несколько копий программы, причём без лицензии такое использование
            рассматривалось бы в рамках закона как нарушение авторских прав издателя <a href="#ref1">[1]</a>. На рынке
            программного обеспечения в настоящий момент активно используется программное обеспечения с открытым кодом,
            но также большое количество коммерческих программных продуктов.
          </p>

          <p>
            Сегодня используются такие виды лицензий на программное обеспечение: открытая лицензия (Open Source),
            бесплатная лицензия (Freeware, GPL, Adware, Postcardware, Donationware, Nagware, begware) условно-бесплатное
            программное обеспечение (ShareWare, Trial, trialware, Demo, demoware), коммерческое программное обеспечение
            (Commercial) <a href="#ref1">[1]</a>.
          </p>

          <p>
            Цель работы — описать механизм подсистемы защиты авторского права на программное обеспечение с
            использованием криптографических алгоритмов шифрования для возможного использования при лицензировании
            условно-бесплатного или коммерческого программного обеспечения.
          </p>

          <h2>Обзор существующих механизмов защиты авторского права на программное обеспечение</h2>

          <p>
            Для защиты ПО используется ряд методов, таких как:
            <ul>
              <li>алгоритмы запутывания - используются хаотические переходы в разные части кода, внедрение ложных процедур - "пустышек", холостые циклы, искажение количества реальных параметров процедур ПО, разброс участков кода по разным областям ОЗУ и т.п.;</li>
              <li>алгоритмы мутации - создаются таблицы соответствия операндов - синонимов и замена их друг на друга при каждом запуске программы по определённой схеме или случайным образом, случайные изменения структуры программы;</li>
              <li>алгоритмы компрессии данных - программа упаковывается, а затем распаковывается по мере выполнения;</li>
              <li>алгоритмы шифрования данных - программа шифруется, а затем расшифровывается по мере выполнения;</li>
              <li>вычисление сложных математических выражений в процессе отработки механизма защиты - элементы логики защиты зависят от результата вычисления значения какой-либо формулы или группы формул;</li>
              <li>методы затруднения дизассемблирования - используются различные приёмы, направленные на предотвращение дизассемблирования в пакетном режиме;</li>
              <li>методы затруднения отладки - используются различные приёмы, направленные на усложнение отладки программы;</li>
              <li>эмуляция процессоров и операционных систем - создаётся виртуальный процессор и/или операционная система;</li>
              <li>нестандартные методы работы с аппаратным обеспечением - модули системы защиты обращаются к аппаратуре <a href="#ref2">[2]</a>.</li>
            </ul>
          </p>

          <p>
            Защита, основанная на знании, является наиболее уязвимой, так как легальные пользователи могут сообщить всем
            серийный номер, с помощью которого другие пользователи могут запустить программу нелегально. В случае если
            серийный номер уникально генерируется для каждого пользователя и является функцией его имени, активировать
            программу одинаковым серийным номером не получится. В этом случае придётся проанализировать алгорит
            генерации серийного номера в зависимости от имени пользователя либо избавиться от алгоритма защиты,
            "пропатчив" исполнимый код программы, то есть, изменив в бинарном коде программы условие, при котором
            система защиты посчитает ПО активированным.
          </p>

          <p>
            Практически для каждого популярного ПО можно найти в интернете взломанную рабочую копию. В основном,
            защитные механизмы делятся на две основные категории: основанные на знании пароля, серийного номера и
            основанные на владении носителя информации с ключом, файлов программы.
          </p>

          <p>
            Более стойкими являются системы защиты второй категории, основанные на владении некоторым носителем, который
            практически невозможно воссоздать самостоятельно. Но огромным минусом такой защиты является тот факт, что
            ключевой носитель может быть потерян или испорчен. Тогда пользователю придётся пройти процедуру
            восстановления такого носителя при условии, если разработчик её вообще поддерживает <a href="#ref3">[3]</a>.
          </p>

          <h2>Алгоритм работы подсистемы защиты авторского права программного обеспечения</h2>

          <p>
            Предположим, имеется разработанное программное обеспечение, которое нужно защитить от незаконного
            копирования и дальнейшего использования.
          </p>

          <p>
            При выборе алгоритма работы подсистемы защиты авторского права программного обеспечения будем считать, что
            программное обеспечение условно-бесплатное или коммерческое.
          </p>

          <p>
            Основная идея подсистемы защиты авторского права ПО состоит в том, что существует некоторый файл, без
            которого программа не способна выполнить какие-либо важные для пользователя функции (набор функций программы
            ограничен). Для доступа ко всему набору функций ПО, необходимо получить доступ к дополнительному файлу.
            Получить расширенные возможности по работе с программной пользователь может лишь предварительно подтвердив
            свои лицензионные данные — права на использование данного ПО. Таким образом, невозможно будет использовать
            программу без покупки лицензии на неё <a href="#ref4">[4]</a>.
          </p>

          <p>
            Пусть защищаемое ПО состоит из запускаемого исполнимого модуля *.exe и вспомогательного модуля *.dll <a href="#ref5">[5]</a>,
            благодаря которому будет возможно работать с полной версией программы, доступной в платной версии. Покупая
            программу, пользователь получает установочный дистрибутив, который содержит только лишь запускаемый модуль *.exe.
          </p>

          <p>
            После установки программы, система защиты запрашивает данные о лицензии, например, персональные данные
            пользователя и соответствующий ключ, которые данный пользователь получил при покупке ПО.
          </p>

          <p>
            На рисунке 1 изображён процесс получения вспомогательного модуля программы.
          </p>

          <div class="text-center">
            <figure class="figure">
              <img class="figure-img" src="article2/fig1.png" alt="Получение вспомогательного модуля программы с использованием криптографических алгоритмов шифрования">
              <figcaption class="figure-caption">Рисунок 1 — Получение вспомогательного модуля программы с использованием криптографических алгоритмов шифрования</figcaption>
            </figure>
          </div>

          <p>
            Алгоритм получения пользователем вспомогательного модуля программы будет следующим. При установке
            программного обеспечения и вводе пользователем данных (ФИО, электронный адрес, номер телефона), персональные
            данные пользователя и некоторая информация об используемом аппаратном обеспечении компьютера (серийный номер
            процессора, жёсткого диска, MAC-адрес сетевого адаптера), а также ключ, который пользователь получил при
            покупке, передаётся на сервер фирмы-разработчика устанавливаемого программного обеспечения с использованием
            защищённого канала связи (использование защищённого протокола передачи данных) <a href="#ref6">[6]</a>.
            Полученная информация на сервере записывается в базу данных фирмы-разработчика ПО. Таким образом, на сервере
            хранится вся информация, идентифицирующая пользователя, установившего программный продукт.
          </p>

          <p>
            Следующим этапом является использование криптографических алгоритмов <a href="#ref7">[7]</a> для шифрования
            вспомогательного модуля программы *.dll.
          </p>

          <p>
            Файлы *.dll можно защитить, используя симметричный алгоритм шифрования (например, AES) <a href="#ref8">[8]</a>.
            Для генерации уникального ключа симметричного алгоритма, которым будет зашифрован вспомогательный модуль,
            можно использовать полученную информацию из регистрационной формы пользователя.
          </p>

          <p>
            Таким образом, вспомогательный модуль программы будет зашифрованным передаваться по сети, храниться на
            машине пользователя.
          </p>

          <p>
            При использовании симметричных алгоритмов шифрования для защиты файлов, хранящихся на диске или передаваемых
            по сети, рекомендуется ключи, которыми шифруются файлы, также защищать. Для защиты ключей симметричных
            криптографических алгоритмов используют криптографические алгоритмы с открытым ключом, например алгоритм
            RSA <a href="#ref7">[7]</a>.
          </p>

          <p>
            Предположим, что на сервере фирмы-разработчика ПО уже сгенерирован ключ симметричного алгоритма шифрования
            для пользователя, подтверждающего свою лицензию и ожидающего вспомогательного модуля программы.
          </p>

          <p>
            Для шифрования самого ключа симметричного алгоритма используем схему шифрования с открытым ключом <a href="#ref7">[7]</a>.
          </p>

          <p>
            При регистрации пользователя в программе должна сгенерироваться пара ключей (открытый и закрытый) <a href="#ref8">[8]</a>.
            В дальнейшем закрытый ключ будет храниться на машине пользователя, открытый ключ вместе с персональными
            данными пользователя передаётся на сервер фирмы разработчика и также хранится в базе данных. С помощью
            открытого ключа сервер зашифрует ключ симметричного алгоритма, которым был зашифрован вспомогательный модуль
            программы, допишет его в зашифрованный вспомогательный модуль (например, в конец файла) и передаст программе
            пользователя.
          </p>

          <p>
            При необходимости использования вспомогательного модуля программой сначала будет извлечён зашифрованный
            открытым ключом ключ симметричного алгоритма, с помощью закрытого ключа ассиметричного алгоритма будет
            расшифрован ключ симметричного алгоритма, затем с помощью ключа симметричного алгоритма будет расшифрован
            сам файл вспомогательного модуля. Программа сообщает об успешной активации лицензии. Теперь, при
            необходимости обращения к вспомогательному модулю, программа расшифровывает его "на лету", а при завершении
            работы удаляет расшифрованный файл из памяти.
          </p>

          <h2>Достоинства и недостатки подсистемы защиты авторского права программного обеспечения</h2>

          <p>
            Описанная подсистема защиты ПО обладает рядом достоинств и недостатков.
          </p>

          <p>
            Достоинства:
            <ul>
              <li>обычный опытный пользователь не сможет обойти защиту;</li>
              <li>система защиты способна справиться с крэкерами-новичками, а также запутать крэкеров среднего уровня;</li>
              <li>в случае использования эффективного средства обфускации для сокрытия алгоритма подсистемы защиты, а также использования методов виртуализации функций системы защиты, даже опытным крэкерам понадобится немало времени, чтобы исследовать и взломать алгоритм проверки лицензии;</li>
              <li>для получения вспомогательного модуля, для защиты которого используются криптографические алгоритмы, нужно знать ключи и используемые криптографические алгоритмы; </li>
              <li>взлом базы данных сервера фирмы-разработчика ПО, на котором хранится персональная информация о пользователях и их серийных номерах программы, не даст информации обо всех используемых ключах криптосистемы, а значит, не позволит расшифровать вспомогательный модуль программы и использовать незаконно программный продукт;</li>
              <li>для предотвращения использования метода перебора ключей, рекомендуется использовать значительную длину ключей в симметричных и ассиметричных алгоритмах шифрования.</li>
            </ul>
          </p>

          <p>
            Недостатки:
            <ul>
              <li>без обфускации подсистема защиты не защищена от декомпиляции и дизассемблирования с целью внесения изменений в алгоритм работы функций защиты (патчинг);</li>
              <li>при активации программы необходимо подключение к интернету;</li>
              <li>в случае использования информации об аппаратном обеспечении конечного пользователя для генерации уникального ключа, которым будет зашифрован вспомогательный модуль, при замене какой-либо аппаратной части необходимо будет сообщать разработчику об этом и проходить снова процедуру активации программы.</li>
            </ul>
          </p>

          <h2>Выводы</h2>

          <p>
            В ходе выполнения данной работы были рассмотрены и проанализированы существующие механизмы защиты авторского
            права на программное обеспечение, предложен общий алгоритм работы подсистемы защиты авторского права
            программного обеспечения, рассмотрена возможность использования криптографических алгоритмов шифрования для
            защиты вспомогательного модуля программного обеспечения, представлены достоинства и недостатки предлагаемой
            подсистемы защиты. На данный момент не существует абсолютной программной защиты ПО, которое невозможно было
            бы взломать, если не учитывать время, затраченное на исследование этой защиты. Однако наиболее эффективными
            средствами при создании подобного рода систем проверки лицензии являются использование криптографических
            алгоритмов и обфускация функций подсистемы защиты.
          </p>

          <h2>Литература</h2>

          <ol>
            <li id="ref1">Виды лицензий на программное обеспечение // Information Technology Engineering Projects. [Электронный ресурс]. – Режим доступа: <a href="http://www.it-ep.ru/knowledge_base/software_licensing/type_of_software_license/">http://www.it-ep.ru/knowledge_base/software_licensing/type_of_software_license/</a></li>
            <li id="ref2">Середа С.А. Оценка эффективности систем защиты программного обеспечения // CITForum. [Электронный ресурс]. – Режим доступа: <a href="http://citforum.ru/security/software/sereda1/">http://citforum.ru/security/software/sereda1/</a></li>
            <li id="ref3">Касперски К., Рокко Е. Искусство дизассемблирования. – СПб.: БХВ-Петербург, 2008. – 896 с.</li>
            <li id="ref4">Скляров Д. Искусство защиты и взлома информации. – СПб.: БХВ-Петербург, 2004. – 288 с.</li>
            <li id="ref5">Работа с библиотеками динамической компоновки (DLL) // Visual C++. [Электронный ресурс]. - Режим доступа: <a href="http://www.softzenware.com/visual/visual12.html">http://www.softzenware.com/visual/visual12.html</a></li>
            <li id="ref6">Каналы защищенной передачи данных //Энциклопедия теоретической и прикладной криптографии. [Электронный ресурс] - Режим доступа: <a href="http://cryptowiki.net/">http://cryptowiki.net/</a></li>
            <li id="ref7">Столлингс В. Криптография и защита сетей. - М.: Издательский дом "Вильямс", 2001 г., - 669 стр.</li>
            <li id="ref8">Соколов А.В., Шаньгин В.Ф. Защита информации в распределенных корпоративных сетях и системах. - М.: ДМК Пресс, 2002 г. – 655 стр.</li>
          </ol>
        </div>
      </div>
    </main>
  </div>

  <!-- Optional JavaScript -->
  <!-- jQuery first, then Popper.js, then Bootstrap JS -->
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js" integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy" crossorigin="anonymous"></script>
</body>
</html>
